{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.loginPath = environment.apiUrl + '/identity/login';\n      this.registerPath = environment.apiUrl + '/identity/register';\n      this.currentUserSubject = new BehaviorSubject(localStorage.getItem('token') || '{}');\n      this.currentUser = this.currentUserSubject.asObservable();\n    }\n\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n\n    login(data) {\n      return this.http.post(this.loginPath, data).pipe(map(response => {\n        if (response && response['token']) {\n          this.saveToken(response['token']);\n          this.currentUserSubject.next(response.result);\n        }\n\n        return response;\n      }));\n    }\n\n    logout() {\n      localStorage.removeItem('token');\n    }\n\n    register(data) {\n      return this.http.post(this.registerPath, data);\n    }\n\n    saveToken(token) {\n      localStorage.setItem('token', token);\n    }\n\n    getToken() {\n      return localStorage.getItem('token');\n    }\n\n    isAuthenticated() {\n      if (this.getToken()) {\n        return true;\n      }\n\n      return false;\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}